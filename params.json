{"name":"EDMdesigner-API","tagline":"Documentation of the EDMdesigner API for integration projects","body":"EDMdesigner-API\r\n===============\r\n\r\n[EDMdesigner](http://www.edmdesigner.com) is a drag and drop tool for creating responsive HTML e-mail templates very quickly and painlessly, radically increasing your click-through rate. This documentation is to give you a detailed description about the EDMdesigner-API with which you can integrate our editor into any web-based system (e.g. a CRM, CMS, WebShop or anything else you can imagine).\r\n\r\nTo start developing with our api, please request an API_KEY (and a corresponding magic word) at info@edmdesigner.com.\r\n\r\nBasically, the only thing you have to do is to implement one side of the handshaking on your server. When the handshaking is done, you can use the sent object, in which you can find the functions that are communicating with our server.\r\n\r\nThe handshaking is built into the initialization process, so if you implemented the handshaking on your side, everything will work automatically.\r\n\r\nWe provide example implementations that include the handshaking as well. You can find the continously broading list at the end of this page at the Example implementations section.\r\n\r\nInitializing\r\n------------\r\n\t\r\n\t<script src=\"path_to_your_jquery.js\"></script>\r\n\t<script src=\"http://api.edmdesigner.com/EDMdesignerAPI.js?route=##handshaking_route##\"></script>\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"##userId##\", function(edmDesignerApi) {\r\n\t\t\t...\r\n\t\t}, onErrorCB);\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\t\r\nFirst of all, jQuery has to be loaded before you load our API. In the second line you can see a route parameter in the script's src. By that you can tell the script where to look for the handshaking implementation. For example, if you implemented it in your index.php, you have to replace ##handshaking_route## with index.php. The first parameter is a user id from your system. It can be any string. In case you don't want to handle separate user accounts, just pass there your API_KEY. The last parameter is an error callback which will be called in every request if the request fails. This is not required thus you can set an error callback in one of your function calls (see later) and in that case it will be called instead of this one.\r\n\r\nIn the resulting object (edmDesignerApi) you will find some functions through which you can interact with our system.\r\n\r\n### Handshaking\r\nTo implement the handshaking on your server, you need an API_KEY, a magic word (wich is delivered with your API_KEY), your user's IPv4 address and a timestamp. The logic that handles handshaking has to receive the userId too, because it has to be sent to our server as well. Our API implementation automatically sends the userId in a POST HTTP request. You can set this user id by the first parameter of the initEDMdesignerPlugin.\r\n\r\nAfter concatenating the API_KEY, the IPv4 address of your user, the timestamp (as a string) and your magic word, you have to create an md5 hash of the resulting string.\r\n\r\n\t\r\n\thash = md5(API_KEY + ipv4 + timestamp + magic)\r\n\r\n\r\nAfter this, you have to send the API_KEY, the userId, the IPv4 address, the timestamp and the generated md5 hash to our server at api.edmdesigner.com/api/token through HTTP.\r\n\r\nIf everything goes well, you get back a token, with which your user can be identified.\r\n\r\n# API functions\r\n## User functions\r\n### edmDesignerApi.listProjects(callback, onErrorCB)\r\nLists the projects of the actual user.\r\n#### Parameters:\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n\r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestUser\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.listProjects(function(result) {\r\n\t\t\t\tconsole.log(result);\r\n\t\t\t});\r\n\t\t}, onErrorCB);\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\t\r\n\r\n### edmDesignerApi.createProject(data, callback, onErrorCB)\r\nCreates a new project (a new e-mail template).\r\n#### Parameters:\r\n  * data {Object}\r\n    * data.title {String} The title of the new project.\r\n    * data.description {String} The description of the new project.\r\n    * data.document {Object} An object, which represents a template. By setting this param, you can create new projects based on your prepared custom templates.\r\n  * callback {Function} A function to be called if the request succeeds\r\n    * the result param is an object in which you can find an _id property, which identifies the newly created project\r\n    * result._id {String} The id of the new project. (This is a [MongoDB](http://www.mongodb.org/) id.)\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n\r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestUser\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createProject(function({title: \"test-title\", description: \"test-desc\", document: {}}, result) {\r\n\t\t\t\tconsole.log(result._id);\r\n\t\t\t});\r\n\t\t}, onErrorCB);\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\t\r\n\t\r\n### edmDesignerApi.duplicateProject(projectId, callback, onErrorCB)\r\nCreates the exact copy of the project with the ID specified in projectId.\r\n#### Parameters:\r\n  * projectId {String} The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the edmDesignerAPI.listProjects function.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n\r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestUser\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createProject({title: \"test-title\", description: \"test-desc\"}, function(result) {\r\n\t\t\t\tedmDesignerApi.duplicateProject(result._id, function(result) {\r\n\t\t\t\t\t//callback hell...\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}, onErrorCB);\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\t\r\n\r\n### edmDesignerApi.removeProject(projectId, callback, onErrorCB)\r\nRemoves a project.\r\n#### Parameters:\r\n  * projectId {String} The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the edmDesignerAPI.listProjects function.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n\r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestUser\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createProject({title: \"test-title\", description: \"test-desc\"}, function(result) {\r\n\t\t\t\tedmDesignerApi.removeProject(result._id, function(result) {\r\n\t\t\t\t\t//callback hell...\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}, onErrorCB);\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\t\r\n\r\n### edmDesignerApi.openProject(projectId, callback, onErrorCB)\r\nOpens a project.\r\n#### Parameters:\r\n  * projectId {String} The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the edmDesignerAPI.listProjects function.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n\r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestUser\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createProject({title: \"test-title\", description: \"test-desc\"}, function(result) {\r\n\t\t\t\tedmDesignerApi.openProject(result._id, function(result) {\r\n\t\t\t\t\t$(\"body\").append(result.iframe);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}, onErrorCB);\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\t\r\n\r\n### edmDesignerApi.generateProject(projectId, callback, onErrorCB)\r\nGenerates the bulletproof responsive HTML e-mail based on the projectId.\r\n#### Parameters:\r\n  * projectId {String} The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the edmDesignerAPI.listProjects function.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n\r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestUser\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createProject({title: \"test-title\", description: \"test-desc\"}, function(result) {\r\n\t\t\t\tedmDesignerApi.generateProject(result._id, function(result) {\r\n\t\t\t\t\t//the result is a robust responsive HTML e-mail code.\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}, onErrorCB);\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\t\r\n\t\r\n### edmDesignerApi.getDefaultTemplates(callback, onErrorCB)\r\nYou can get the default templates povided by EDMdesigner by calling this funciton.\r\n#### Parameters:\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestUser\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.getDefaultTemplates(function(result) {\r\n\t\t\t//the result is an array, containing the default projects, provided by EDMdesigner\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n##Admin functions\r\n### edmDesignerApi.listGroups(callback, onErrorCB)\r\nLists the groups you have\r\n#### Parameters:\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.listGroups(function(result) {\r\n\t\t\t\t//the result is an array, containing your groups\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n### edmDesignerApi.createGroup(data, callback, onErrorCB)\r\nCreates a new group\r\n#### Parameters:\r\n  * data {Object}\r\n    * data.name {String} /REQUIRED/ The name you want to give to the new group\r\n    * data.featureSwitch {Object} The features that are available for users belong to this group. Please note that now it doesn't have any function, but later there will be a list of possible features which you can choose from.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createGroup({name: \"exampleGroup\", featureSwitch: {exampleFeature1: true, exampleFeature3: true}}, function(result) {\r\n\t\t\t\t//the resultGroup is an object with\r\n\t\t\t\t//name {String} (the new group's name)\r\n\t\t\t\t//_id  {String} (the new group's id) and\r\n\t\t\t\t//featureSwitch {Object} (the group's features) properties\r\n\t\t\t\tconsole.log(result);\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n### edmDesignerApi.getGroup(groupId, callback, onErrorCB)\r\nGets a specified group\r\n#### Parameters:\r\n   * groupId {String} The id of the group. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the edmDesignerAPI.listGroups function.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createGroup({name: \"exampleGroup\", featureSwitch: {}}, function(result) {\r\n\t\t\t\r\n\t\t\t\tedmDesignerApi.getGroup(result._id, function(resultGroup) {\t\r\n\t\t\t\t\t//the resultGroup is an object with\r\n\t\t\t\t\t//name {String} (the new group's name)\r\n\t\t\t\t\t//_id  {String} (the new group's id) and\r\n\t\t\t\t\t//featureSwitch {Object} (the group's features) properties\r\n\t\t\t\t\tconsole.log(resultGroup);\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n### edmDesignerApi.updateGroup(groupId, data, callback, onErrorCB)\r\nUpdates a specified group's name or the features it provides or both of these two at the same time.\r\n#### Parameters:\r\n   * groupId {String} The id of the group. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the edmDesignerAPI.listGroups function.\r\n   * data {Object}\r\n     * data.name {String} The name you want to give to the group\r\n     * data.featureSwitch {Object} The features that are available for users belong to this group. Please note that now it doesn't have any function, but later there will be a list of possible features which you can choose from.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createGroup({name: \"exampleGroup\", featureSwitch: {feature1: true}}, function(result) {\r\n\t\t\t\r\n\t\t\t\tedmDesignerApi.updateGroup(result._id, {name: \"newName\"}, function(resultGroup) {\t\r\n\t\t\t\t\t//the resultGroup is an object with\r\n\t\t\t\t\t//name {String} (the new group's name)\r\n\t\t\t\t\t//_id  {String} (the new group's id) and\r\n\t\t\t\t\t//featureSwitch {Object} (the group's features) properties\r\n\t\t\t\t\tconsole.log(resultGroup);\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\tedmDesignerApi.createGroup({name: \"exampleGroup2\", featureSwitch: {feature1: true}}, function(result) {\r\n\t\t\t\r\n\t\t\t\tedmDesignerApi.updateGroup(result._id, {featureSwitch: {feature1: true, newFeature: true}}, function(resultGroup) {\t\r\n\t\t\t\t\t//the resultGroup is an object with\r\n\t\t\t\t\t//name {String} (the new group's name)\r\n\t\t\t\t\t//_id  {String} (the new group's id) and\r\n\t\t\t\t\t//featureSwitch {Object} (the group's features) properties\r\n\t\t\t\t\tconsole.log(resultGroup);\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t\t\r\n\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\tedmDesignerApi.createGroup({name: \"exampleGroup3\", featureSwitch: {feature1: true}}, function(result) {\r\n\t\t\t\r\n\t\t\t\tedmDesignerApi.updateGroup(result._id, {name: \"newExampleName\", featureSwitch: {feature1: true, newFeature: true}}, function(resultGroup) {\t\r\n\t\t\t\t\t//the resultGroup is an object with\r\n\t\t\t\t\t//name {String} (the new group's name)\r\n\t\t\t\t\t//_id  {String} (the new group's id) and\r\n\t\t\t\t\t//featureSwitch {Object} (the group's features) properties\r\n\t\t\t\t\tconsole.log(resultGroup);\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\t}, onErrorCB);\r\n\t\t\r\n\t\t\tfunction onErrorCB(error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t}\r\n\t\t});\r\n\t</script>\r\n\r\n___\r\n\t\r\n### edmDesignerApi.listUsers(callback, onErrorCB)\r\nLists the users you have\r\n#### Parameters:\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.listUsers(function(result) {\r\n\t\t\t\t//the result is an array, containing your users\r\n\t\t\t\t//A user is an object with\r\n\t\t\t\t//id (the user's id)\r\n\t\t\t\t//group (The group which the user belongs) and\r\n\t\t\t\t//createTime (Time of creation) properties\r\n\t\t\t\tconsole.log(result);\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n### edmDesignerApi.createUser(data, callback, onErrorCB)\r\nCreates a new user\r\n#### Parameters:\r\n  * data {Object}\r\n    * data.id {String} /REQUIRED/ The id you want to use for this new user\r\n    * data.group {String} The id of the group you want this user to belong. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the edmDesignerAPI.listGroups function.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createGroup({name: \"exampleGroup\", featureSwitch: {}}, function(result) {\r\n\t\t\t\r\n\t\t\t\tedmDesignerApi.createUser({id: \"exampleuserId\", group: result._id}, function(resultUser) {\r\n\t\t\t\t\t// the resultUser is an object with an id property\r\n\t\t\t\t\tconsole.log(resultUser);\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n### edmDesignerApi.createMultipleUser(data, callback, onErrorCB)\r\nCreates multiple user\r\n#### Parameters:\r\n  * data {Array} It contains user objects. User object should have the following properties:\r\n    * id {String} /REQUIRED/ The id you want to use for this new user\r\n    * group {String} The id of the group you want this user to belong. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the edmDesignerAPI.listGroups function.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createGroup({name: \"exampleGroup\", featureSwitch: {}}, function(result) {\r\n\t\t\t\r\n\t\t\t\tedmDesignerApi.createMultipleUser([{id: \"exampleUserId\", group: result._id}, {id: \"exampleUser2Id}, {id: \"exampleUser3\"}], function(resultObj) {\r\n\t\t\t\t\t// the resultObj is an object with the following properties:\r\n\t\t\t\t\t// created {Array} It contains the users whose have been created\r\n\t\t\t\t\t// failed {Array} It contains the users whose creation has failed\r\n\t\t\t\t\t// alreadyHave {Array} It contains the users whose you already created\r\n\t\t\t\t\tconsole.log(resultObj);\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n### edmDesignerApi.getUser(userId, callback, onErrorCB)\r\nGets a specified user\r\n#### Parameters:\r\n   * userId {String} The id of the user.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createUser({id: \"exampleUserId\"}, function(result) {\r\n\t\t\t\r\n\t\t\t\tedmDesignerApi.getUser(result.id, function(resultUser) {\r\n\t\t\t\t\t/**the resultUser is an object with\r\n\t\t\t\t\tid (the user's id)\r\n\t\t\t\t\tgroup (The group which the user belongs) and\r\n\t\t\t\t\tcreateTime (Time of creation) properties*/\r\n\t\t\t\t\tconsole.log(resultUser);\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n### edmDesignerApi.updateUser(userId, data, callback, onErrorCB)\r\nUpdates a specified user. Only the group (which the user belongs) can be changed.\r\n#### Parameters:\r\n  * userId {String} The id of the user. \r\n  * data {Object}\r\n    * data.group {String} The id of the group you want this user to belong. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the edmDesignerAPI.listGroups function.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createUser({id: \"exampleUserId\"}, function(result) {\r\n\t\t\t\tedmDesignerApi.createGroup({name: \"exampleGroup\", featureSwitch: {}}, function(resultGroup) {\r\n\t\t\t\t\r\n\t\t\t\t\tedmDesignerApi.updateUser(result.id, {group: resultGroup._id}, function(resultUser) {\t\r\n\t\t\t\t\t\t//the resultUser is an object with an id property\r\n\t\t\t\t\t\tconsole.log(resultUser);\r\n\t\t\t\t\t}, onErrorCB);\r\n\t\t\t\t\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n### edmDesignerApi.deleteUser(userId, callback, onErrorCB)\r\nDeletes a specified user\r\n#### Parameters:\r\n  * userId {String} The id of the user.\r\n  * callback {Function} A function to be called if the request succeeds\r\n  * onErrorCB {Function} A function to be called if the request fails\r\n \r\n#### Example:\r\n\t\r\n\t<script>\r\n\t\tinitEDMdesignerPlugin(\"TestAdmin\", function(edmDesignerApi) {\r\n\t\t\tedmDesignerApi.createUser({id: \"exampleUserId\"}, function(result) {\r\n\t\t\t\r\n\t\t\t\tedmDesignerApi.deleteUser(result.id, function(resultUser) {\r\n\t\t\t\t\t//the resultUser is an object with an id propert\r\n\t\t\t\t\tconsole.log(resultUser);\r\n\t\t\t\t}, onErrorCB);\r\n\t\t\t\r\n\t\t\t}, onErrorCB);\r\n\t\t});\r\n\t\t\r\n\t\tfunction onErrorCB(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t</script>\r\n\r\n___\r\n\r\n# Server side routes\r\nAlmost every client side functions have a corresponding route on server side.\r\n\r\n\r\n## Admin routes\r\n\r\n##Authentication\r\nTo authenticate these routes, you need to generate a token to a \"fake\" user called admin.You should send this token and the admin string on every request's query. (like this: ?user=admint&token=token ).Please note that every route need to be authenticated expect the one which generate the token. (//api.edmdesigner.com/api/token)\r\n\r\nExample: //api.edmdesigner.com/json/groups/list?user=admin&token=adminToken\r\n\r\n### Create handshaking\r\nCreate the handshaking between PHP and API needs to be done before any further call\r\n\t\t\r\n\t\t$url = \"http://api.edmdesigner.com/api/token\";\r\n\t\t$data = array(\r\n\t\t\t\"id\"\t=> $publicId,\r\n\t\t\t\"uid\"\t=> $user,\r\n\t\t\t\"ip\"\t=> $ip,\r\n\t\t\t\"ts\"\t=> $timestamp,\r\n\t\t\t\"hash\"\t=> $hash\r\n\t\t);\r\n\t\t\r\n\t\t$options = array(\r\n\t\t    'http' => array(\r\n\t\t        'header'  => \"Content-type: application/x-www-form-urlencoded\\r\\n\",\r\n\t\t        'method'  => 'POST',\r\n\t\t        'content' => http_build_query($data),\r\n\t\t    )\r\n\t\t);\r\n\r\n\t\t$context  = stream_context_create($options);\r\n\t\t$result = file_get_contents($url, false, $context);\r\n\t\t\r\n\t\t$token = json_decode($result, TRUE);\r\n\r\n___\r\n\r\n## Group manipulating routes\r\n### List groups\r\nLists the groups you have\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/groups/list\r\n\r\n####Answer:\r\nAn array of your groups. Every group is an object with this parameters:\r\n  - _id {String} MongoDB id of the group\r\n  - featureSwitch {Object} The features that are available for users belong to this group. Please note that now it doesn't have any function, but later there will be a list of possible features which you can choose from.\r\n  - name {String} The name of the group\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Create group\r\nCreates a new group\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route \r\n  + //api.edmdesigner.com/json/groups/create\r\n\r\n#### Parameters (you should post):\r\n  * name {String} /REQUIRED/ The name you want to give to the new group\r\n  * featureSwitch {Object} The features that are available for users belong to this group. Please note that now it doesn't have any function, but later there will be a list of possible features which you can choose from.\r\n\r\n####Answer\r\nAn object containing the MongoDB _id of the newly created group:\r\n  - _id {String}\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Get one group\r\nGets a specified group\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/groups/read/:id\r\n\r\n#### Parameters (in the route):\r\n   * id {String} The id of the group. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the /json/groups/list route.\r\n\r\n####Answer:\r\nA group object:\r\n  - _id {String} MongoDB id of the group\r\n  - featureSwitch {Object} The features that are available for users belong to this group. Please note that now it doesn't have any function, but later there will be a list of possible features which you can choose from.\r\n  - name {String} The name of the group\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Update one group\r\nUpdates a specified group's name or the features it provides or both of these two at the same time.\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/groups/update\r\n\r\n#### Parameters (you should post):\r\n   * _id {String} /REQUIRED/ The id of the group. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the /json/groups/list route.\r\n   * name {String} The name you want to give to the group\r\n   * featureSwitch {Object} The features that are available for users belong to this group. Please note that now it doesn't have any function, but later there will be a list of possible features which you can choose from.\r\n\r\n####Answer:\r\nA newly updated group object:\r\n  - _id {String} MongoDB id of the group\r\n  - featureSwitch {Object} The features that are available for users belong to this group. Please note that now it doesn't have any function, but later there will be a list of possible features which you can choose from.\r\n  - name {String} The name of the group\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n## User manipulating routes\r\n\r\n### List\r\nLists the users you have\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/user/list\r\n\r\n####Answer:\r\nAn array of your users. Every user is an object with this parameters:\r\n  - id {String} The id of the user\r\n  - group {String} The MongoDB _id of the group the user belongs to\r\n  - createTime {String} The time when the user was created\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Create user\r\nCreates a new user\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/user/create\r\n\r\n#### Parameters (you should post):\r\n  * id {String} /REQUIRED/ The id you want to use for this new user\r\n  * group {String} The id of the group you want this user to belong. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the /json/groups/list route.\r\n\r\n####Answer:\r\nUser object:\r\n  - id {String} The id of the user (your id, not the MongoDB _id)\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Create multiple user\r\nCreates multiple user\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/user/multipleCreate\r\n\r\n#### Parameters (you should post):\r\n  * users {Array} It contains user objects. User object should have the following properties:\r\n    * id {String} /REQUIRED/ The id you want to use for this new user. Please note that if there is no id then the server will automatically ignore that input! (In this way you can get an empty array as an answer)\r\n    * group {String} The id of the group you want this user to belong. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the /json/groups/list route.\r\n\r\n####Answer:\r\nThree different arrays:\r\n  - created {Array} Contains the ids of the users who was successfully created\r\n    - id {String} The id of the user \r\n  - alreadyHave {Array} Contains the users you already had\r\n    - id {String} The id of the user\r\n    - group {String} The MongoDB _id of the group the user belongs to\r\n    - createTime {String} The time when the user was created\r\n  - falied {Array} Contains the ids of the users whose creation failed\r\n    - id {String} The id of the user\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Get one user\r\nGets a specified user\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/user/getOne/:id\r\n\r\n####Parameters (in the route):\r\n   * :id {String} The id of the user.\r\n\r\n####Answer:\r\nUser object:\r\n  - id {String} The id of the user\r\n  - group {String} The MongoDB _id of the group the user belongs to\r\n  - createTime {String} The time when the user was created\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Update user\r\nUpdates a specified user. Only the group (which the user belongs) can be changed.\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/user/update\r\n\r\n#### Parameters (you should post):\r\n   * id {String} The id of the user. \r\n   * group {String} The id of the group you want this user to belong. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed your groups with the /json/groups/list route.\r\n\r\n####Answer:\r\nUser object:\r\n  - id {String} The id of the updated user\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Delete user\r\nDeletes a specified user\r\n\r\n#####Type\r\n  + DELETE\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/user/delete/:id\r\n  \r\n#### Parameters (in the route):\r\n   * :id {String} The id of the user.\r\n \r\n####Answer:\r\nUser object:\r\n  - id {String} The id of the deleted user\r\n\r\nOr it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Add custom string to all users\r\nAdd customstrings to all of your users.\r\nNote that every calls overwrites the previous, so if you want to remove all the custom strings, just do the call with \t$customStrings['items'] or dont send the items at all\r\n\t\r\n\t\t$url = \"http://api.edmdesigner.com/json/user/addCustomStrings?token=\".$token.\"&user=\".$user;\r\n\t\t//the $token is the string received from token validation and the $user is an existing userId\r\n\t\t\r\n\t\t$customStrings = array();\r\n\t\t$customStrings['items'] = array();\r\n\t\t$customStrings['items'][] = array('label' => 'testLabel1', 'replacer' => 'testReplacer1');\r\n\t\t$customStrings['items'][] = array('label' => 'testLabel2', 'replacer' => 'testReplacer2');\r\n\t\t$customStrings['items'][] = array('label' => 'testLabel3', 'replacer' => 'testReplacer3');\r\n\t\t\r\n\t\t$options = array(\r\n\t\t    'http' => array(\r\n\t\t        'header'  => \"Content-type: application/x-www-form-urlencoded\\r\\n\",\r\n\t\t        'method'  => 'POST',\r\n\t\t        'content' => http_build_query($data),\r\n\t\t    )\r\n\t\t);\r\n\r\n\t\t$context  = stream_context_create($options);\r\n\t\t$result = file_get_contents($url, false, $context);\r\n\t\t$savedResult = json_decode($result, TRUE);\r\n\t\t\r\n___\r\n\r\n### Add custom string to specified user\r\nAdd customstrings to just some of your users. \r\nNote that every calls overwrites the previous, so if you want to remove all the custom strings, just do the call with \t$customStrings['items'] or dont send the items at all\r\n\t\r\n\t\t$url = \"http://api.edmdesigner.com/json/user/addCustomStringsToUser?token=\".$token.\"&user=\".$user;\r\n\t\t//the $token is the string received from token validation and the $user is an existing userId\r\n\t\t\r\n\t\t$customStrings = array();\r\n\t\t$customStrings['userId'] = 'your user id'; // It must be one of your existing user's id, otherwise returns error\r\n\t\t$customStrings['items'] = array();\r\n\t\t$customStrings['items'][] = array('label' => 'testLabel1', 'replacer' => 'testReplacer1');\r\n\t\t$customStrings['items'][] = array('label' => 'testLabel2', 'replacer' => 'testReplacer2');\r\n\t\t$customStrings['items'][] = array('label' => 'testLabel3', 'replacer' => 'testReplacer3');\r\n\t\t\r\n\t\t$options = array(\r\n\t\t    'http' => array(\r\n\t\t        'header'  => \"Content-type: application/x-www-form-urlencoded\\r\\n\",\r\n\t\t        'method'  => 'POST',\r\n\t\t        'content' => http_build_query($data),\r\n\t\t    )\r\n\t\t);\r\n\r\n\t\t$context  = stream_context_create($options);\r\n\t\t$result = file_get_contents($url, false, $context);\r\n\t\t$savedResult = json_decode($result, TRUE);\r\n\r\n___\r\n\r\n##Gallery handling\r\nIf you want to host the uploaded images yourself and want to use your other hosted images as well, then there are a few routes to fulfil this functionality.\r\n\r\nBasic operation: The user uploads an image in the api to our server, which uploads it to the given server. This requires you to implement an upload route on your server and configure our server (you have to do the configuration only once).\r\n\r\n###Configure api server\r\nSet the api server the route where it can upload the images. (This route should be implemented on your server.)\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/gallery/config\r\n  \r\n#### Parameters (you should post):\r\n  * route {String} The route which we can use for uploading the images.\r\n \r\n####Answer:\r\nThe data you posted:\r\n  - route {String}\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n###Get configuration\r\nGets the configuration of the api gallery. It returns the route you set for the uploading\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/gallery/config\r\n  \r\n####Answer:\r\nConfig object: \r\n  - route {String} The route you set for the uploading or nothing if you not configured our server yet. \r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n###List images\r\nLists all images of a specified user\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/gallery/list/:id\r\n\r\n####Parameters (in the route):\r\n  * :id {String} The id of the target user\r\n  \r\n####Answer:\r\nArray of urls\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n###Add images\r\nAdd one or more images to one or more specified users\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/gallery/add\r\n\r\n####Parameters (you should post):\r\n  * images {Array} /REQUIRED/ should contain the images you want to give to the users. Every image should be an object with the following parameters:\r\n    * url {String} /REQUIRED/ The url of the images (you probably host)\r\n    * secure_url {String} Http secure version og the image url\r\n    * thumb_url {String} An url where the thumbnail version of the image is available (Tha gallery can work a lot faster if you can provide a thumbnail)\r\n    * name {String} The name of the image. If it is not given then we will you the last segment of the url\r\n    * width {Number} The original width of the image (It can save a lot of process if you can provide this information)\r\n    * height {Number} The original height of the image (It can save a lot of process if you can provide this information)\r\n  * users {Array} /REQUIRED/ should contain the ids of the users\r\n  \r\n####Answer:\r\nThree different array:\r\n  - added {Array} contains the image user pairs which were successfully created. An object in this array looks like this:\r\n    - image {Object} One image from the posted images array\r\n    - users {Array} An array containing the ids of the users whose get the image successfully\r\n  - alreadyHave {Array} contains the image user pairs where the user alread had the given image. An object in this array looks like this:\r\n    - image {Object} One image from the posted images array\r\n    - users {Array} An array containing the ids of the users whose already had this image\r\n  - failed {Array} contains the image user pairs where the adding the image to the given users failed. An object in this array looks like this:\r\n    - image {Object} One image from the posted images array\r\n    - users {Array} An array containing the ids of the users whose cannot get the image because of somekind of error\r\n    - error {String} Description of the error\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n###Delete images\r\nDelete one or more images from one or more specified users\r\n\r\n#####Type\r\n  + DELETE\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/gallery/delete\r\n\r\n####Parameters (you should post):\r\n  * images {Array} /REQUIRED/ should contain the urls of the images you want to remove from the given users.\r\n  * users {Array} /REQUIRED/ should contain the ids of the users.\r\n  \r\n####Answer:\r\nThree different array:\r\n  - deleted {Array} contains the image user pairs where the image was successfully deleted. An object in this array looks like this:\r\n    - image {Object} One image from the posted images array\r\n      - url {String} The url of the image \r\n    - users {Array} An array containing the ids of the users whose\r\n  - dontHave {Array} contains the image user pairs where the user doesn't have the given image. An object in this array looks like this:\r\n    - image {Object} One image from the posted images array\r\n      - url {String} The url of the image \r\n    - users {Array} An array containing the ids of the users whose doesn't have this image\r\n  - failed {Array} contains the image user pairs where the deleting the image from the given users failed. An object in this array looks like this:\r\n    - image {Object} One image from the posted images array\r\n    - users {Array} An array containing the ids of the users whose image cannot be deleted because of somekind of error\r\n    - error {String} Description of the error\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n##Project handler admin routes\r\n\r\n###Create to\r\nCreates a project/template to a specified user\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/createTo\r\n\r\n####Parameters (you should post):\r\n  * userId {String} /REQUIRED/ The target user's id\r\n  * title {String} The title of the new template, if it is not given, then the project's name will be 'Untitled'\r\n  * description {String} Description of the template, by defaullt it is an empty string\r\n  * document {Object} An object, which represents a template. By setting this param, you can create new projects based on your prepared custom templates\r\n\r\n####Answer:\r\nProject object:\r\n  - _id {String} MongoDB _id of the newly created project\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n###Create from to\r\nCreates a project/template to a specified user using an another template\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/createFromTo\r\n\r\n####Parameters (you should post):\r\n  * userId {String} /REQUIRED/ The target user's id\r\n  * _id {String} /REQUIRED/ The MongoDB _id of the template we want to copy to the target user\r\n  * title {String} The title of the new template, if it is not given, then the project's name will be 'Untitled'\r\n  * description {String} Description of the template, by defaullt it is an empty string\r\n  * document {Object} An object, which represents a template. By setting this param, you can create new projects based on your prepared custom templates\r\n\r\n####Answer:\r\nProject object:\r\n  - _id {String} MongoDB _id of the newly created project\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n###Default templates\r\nEvery api partner get a templater user. (id = \"templater\"). This speciel user have a few project by default which can be used for anything you want. With this route you can list this projects.\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/defaults\r\n\r\n####Answer:\r\nList of projects. Every project is an object with the following parameters:\r\n  - _id {String} MongoDB _id of the project\r\n  - title {String} Title of the template\r\n  - document {Object} An object, which represents a template\r\n  - description {String} Description of the template\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n##User routes\r\n\r\n##Authentication\r\nTo authenticate these routes, userId and a token (generated to the userId) are needed. Those to should be sent on the request's query.(somehow like this: ?user=userID&token=token ). Please note that every route need to be authenticated expect the one which generate the token. (//api.edmdesigner.com/api/token)\r\n\r\nFor example: //api.edmdesginer.com/json/project/list?user=userId&token=123456789\r\n\r\n##Project routes\r\n\r\n### List projects\r\nLists the projects of the actual user.\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/list\r\n\r\n####Answer:\r\nList of projects. Every project is an object with the following parameters:\r\n  - _id {String} MongoDB _id of the project\r\n  - title {String} Title of the template\r\n  - description {String} Description of the template\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\t\r\n\r\n### Create\r\nCreates a new project (a new e-mail template).\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/list\r\n\r\n#### Parameters (you should post):\r\n  * title {String} The title of the new project.\r\n  * description {String} The description of the new project.\r\n  * document {Object} An object, which represents a template. By setting this param, you can create new projects based on your prepared custom templates.\r\n\r\n#### Answer:\r\n  - _id {String} MongoDB _id of the newly created project\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\t\r\n\t\r\n### Duplicate\r\nCreates the exact copy of the project with the ID specified in projectId.\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/duplicate/:id\r\n\r\n#### Parameters (in the route):\r\n  * :id {String} The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the /json/project/list route.\r\n\r\n#### Answer:\r\nProject object:\r\n  - _id {String} The MongoDB _id of the new template\r\n  - title {String} The title of the new template\r\n  - description {String} The description of the new template\r\n  - document {Object} An object, which represents the new template\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\t\r\n\r\n### Remove\r\nRemoves a project.\r\n\r\n#####Type\r\n  + DELETE\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/remove/:id\r\n\r\n#### Parameters (in the route):\r\n  * :id {String} The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the /json/project/list route.\r\n\r\n####Answer:\r\nA number, it is 1 if the project was successfully deleted\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\t\r\n\r\n### Generate\r\nGenerates the bulletproof responsive HTML e-mail based on the projectId.\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/generate/:id\r\n\r\n#### Parameters (in the route):\r\n  * :id {String} The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the /json/project/list route.\r\n\r\n####Answer\r\nA bulletproof responsive HTML version of the given template\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Get title\r\nGets the title of the selected project.\r\n\r\n#####Type\r\n  + GET\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/title/:id\r\n\r\n#### Parameters (in the route):\r\n  * :id {String} The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the /json/project/list route.\r\n\r\n####Answer\r\nTitle object:\r\n  - title {String} The title of the selected project\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n### Update information\r\nUpdates the title or/and the description of the specified project\r\n\r\n#####Type\r\n  + POST\r\n\r\n#####Route\r\n  + //api.edmdesigner.com/json/project/updateInfo\r\n\r\n#### Parameters (you should post):\r\n  * projectId {String} /REQUIRED/ The id of the project. Note that it has to be a valid MongoDB _id. It's best if you use the values that you got when you listed the projects of the user with the /json/project/list route.\r\n  * title {String} The title of the new project.\r\n  * description {String} The description of the new project.\r\n\r\n#### Answer:\r\n  - _id {String} MongoDB _id of the newly created project\r\n  - title {String} The title of the new template\r\n  - description {String} The description of the new template\r\n  - document {Object} An object, which represents the new template\r\n\r\nor it can be an error object:\r\n  - err Description of the error {String} or an error code {Number}.\r\n\r\n___\r\n\r\n\r\nExample implementations\r\n-----------------------\r\n  * [Node.js example](https://github.com/EDMdesigner/EDMdesigner-API-Example-Node.js)\r\n  * [PHP example](https://github.com/EDMdesigner/EDMdesigner-API-Example-PHP)\r\n  * [PHP admin example](https://github.com/EDMdesigner/EDMDesigner-API-Example-PHP-Admin)\r\n  \r\nDependencies\r\n------------\r\njQuery\r\n\r\n","google":"UA-47221564-1","note":"Don't delete this file! It's used internally to help with page regeneration."}